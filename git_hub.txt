GIT HUB

Agregar un origen Remoto en GIT (ojo en GIT, no en GITHUB!)

$ git remote add [nombre del origen] [https del repositorio]

$ git remote
    --> nos muestra los origenes remotos en nuestro repositorio.

@ git remote -v
    --> nos muestra los origenes de manera verbal (fetch y push)
    fetch: traer de un repo remoto / origen
    push: enviar al repo remoto / origen

    git origin --help
    NOTA: EL FLAG --help NOS PERMITE ACCEDER A LA AYUDA DE UN COMANDO EN GIT.

    ---------------------------

    Para fusionar un repositorio remoto con uno local.

    $ git push [nombre del remoto] [rama local que se envia: ej main]
    $ git push origen main

    

    pueden salir warnings en caso de que sea la primera vez que se combinan o que los contenidos no coincidan.

    Warning: no common commits
    fatal: refusing to merge unrelated histories

    para darle solucion:
    $ git pull [remote name] [branch name] --allow-unrelated-histories

    $ git pull origen main --allow-unrelated-histories 
    
    
    *** LLAVES PUBLICAS Y PRIVADAS  ***
    ***********************************
    
    Las llaves publicas y privadas nos ayudan a cifrar y descifrar información privada que queremos compartir pero que no queremos que caiga en manos equivocadas.
    
    ¿Cómo se hace?
        1. Ambas personas (ambos extremos) deben crear sus llaves (una pública y otra privada)
        2. Ambos extremos deben compartir su llave pública con el otro extremo. (no hay problema si por error alguien intercepta nuestra llave publica)
        3. La persona (extremo) que quiere compartir un mensaje o información, puede usar la llave pública de la otra persona para cifrar la información y de esta manera asegurarse que solo pueda ser descifrada la información con la llave privada del otro extremo.
        4. El mensaje o información queda cifrado y se puede compartir con la otra persona (extremo) sin preocupación de que este sea interceptado.
        5. EL otro extremo usará su llave privada para descifrar el mensaje o información.
        
***WARRING**** podremos compartir nuestra llave PUBLICA, pero NUNCA! nuestra llave privada.




---------------------   --------------------    -------------------

    Acceso a gihub por medio de llaves ssh.
---------------------   --------------------    -------------------
CONFIGURANDO TUS LLAVES SSH EN LOCAL.
--------------------------------------

                                                                            configuraciones preliminares:
                                                                            $ git config -l
                                                                                       --> lista de los parametros configurados

                                                                            $ git config --global user.email "correo@configurar.aca"



PRIMER PASO.
------------
    Generar tus llaves SSH:Secure Shell      ***"es buena idea proteger nuestra llave privada con una contraseña"***


<<< Para Generar una Llave Publica y Privada >>>

$ ssh-keygen -t rsa -b 4096 -C "d6rkmatterz@gmail.com"

$ ssh-keygen -->> Generar Llave Secure Shell

-t rsa --> especifica cual es el algoritmo que se va a usar, en este caso el algoritmo "rsa"

-b 4096 --> Especifica la complejidad de la llave desde una perspectiva matematica --> 4096

-C "d6rkmatterz@gmail.com" --> Conectar la llave al correo especificado.



Una vez damos "Enter" a nuestro comando $ ssh-keygen -t rsa -b 4096 -C "d6rkmatterz@gmail.com" debemos especificar al sistema que ubicación queremos para nuestras llaves.

una vez especificamos esto, se nos pedirá un passphrase para nuestra llave privada.

posteriormente podremos ver en la ubicación que especificamos dos archivos. 
1. id_rsa --> nuestra llave privada
2. id_rsa.pub --> nuestra llave publica.

SEGUNDO PASO.
-------------
    Terminar de configurar las llaves en nuestro sistema.
Ahora una ves tenemos nuestra llave, tendremos que agregarla al entorno.
    --> es decir: Que el sistema operativo sepa que tu llave existe.
    
1. Revisar que el servidor de llaves este encendido.
#encender el servidor de llaves SSH en Win y Linux
$ eval $(ssh-agent -s)

--> la terminal nos debera dar como respuesta algo asi: agent pid ###---> un valor
    agent --> quiere decir que el sevidor de llaves esta funcionando
    pid --> process id -- la identificación del proceso
    ### --> es un valor que identifica al proceso que esta ejecutandose.
    
2. Ahora debemos agregar nuestra llave a este servidor de llaves ssh.

$ ssh-add (ruta donde quedó guardada la llave privada y su nombre): ej ~/.ssh/llave_rsa
$ ssh-add ~/.ssh/llave_rsa (si configuraste passphrase te lo pedirá)


-------EN--------MAC-------------
El proceso de creación de llaves es exactamente igual, lo que cambia es la configuración de nuestras llaves en el sitema mac os, 

Para arrancar el servidor SSH en MAC:

$ eval "$(ssh-agent -s)"
dara el mismo resultado: agent pid ####

Para Mac OS 20.12 o superior se debe realizar una modificación sobre un archivo de configuración.
--------------------------- ----------------------------    ------------------- -------------------
Desde la carpeta donde se crearon las llaves ssh, ejecutar

$ vim config
o
$ code config

dependiendo del editor de texto que se maneje, atom, etc
a este archivo "config" se le agrega:

Host *
  AddKeysToAgent yes
  UseKeychain yes
  IdentityFile ~/.ssh/id_rsa

Ahora si se agrega la llave privada

$ ssh-add -K ~/.ssh/id_rsa





*****************************   ******************************* ******************************  **************************

-------------------------
CONEXION A GITHUB CON SSH
-------------------------
En la ubicación donde quedaron guardadas nuestras llaves ssh, ubicamos nuestra llave publica.

ssh-rsa 
bla bla bla fdbd634FFdh... bla bla bla!


una vez que la tenemos ubicada podremos indicarle a GITHUB cual es nuestra llave ubicandonos en settings --> ssh and gpg keys --> new ssh key (aca pegamos nuestra llave *PUBLICA !

--> ahora github sabe cual es nuestra llave publica para poderse conectar a nuestro computador. falta decirle a nuestro computador cual es la llave publica de github para que la comunicacion se establezca en doble via.

desde la terminal del pc:

$ git remote -v         
(para ver las direcciones de push y fetch remoto que usa git en mi computadora)
saldrá algo asi:

origin https://...........git (fetch)
origin https://...........git (push)

--> origin: es el nombre del repositorio. por defecto este nombre es utilizado, pero se pueden utilizar cuantos nombres queramos para cada repositorio.
--> https://... : es la url que usa git para conectarse al repositorio remoto, y para el cual necesitaremos autenticarnos con ususario y contraseña, al menos en este modo de conexión.

Para cambiar la url del repositorio: En github en el repositorio a conectar buscamos el boton "code" --> ssh > copiamos la dirección.

$ git remote set-url origin (pegamos aca la dirección ssh de github)



        --------------------------------
        TAGS Y VERSIONES EN GIT Y GITHUB
        --------------------------------
  
CREAR ALIAS:> para acortar instrucciones por una palabra "alias" 

$ git log --all --graph --decorate --oneline 
   |
    --> Nos permite ver de una manera gráfica la historia de commits de nuestro repositorio.
       l> Lo importante de esto es que nos muestra los # de cada commit, para poder hacer nuestros tags posteriormente.
    
        Como es un comando tan largo y dificil de recordar, vamos a usar una función de la terminal que se llaman "alias" de tal manera que podamos invocar nuestro comando de git solo ejecutando una palabra "alias" que vamos a elegir para recordarla. el nombre seria "arbol"

$ alias arbol="git log --all --graph --decorate --oneline"

$ arbol
    l>> será lo mismo que ejecutar --> $ git log --all --graph --decorate --oneline 


CREAR TAGS: (git tag)
            Los tags o etiquetas nos permiten asignar versiones a los commits con cambios importantes o significativos a nuestros proyectos.

    Comandos para trabajar etiquetas:
    
    l> $ git tag -a v0.1 -m "mensaje de la versión" #commit#
        l> git tag --> crear una etiqueta
        l> -a --> agregar tag con la v0.1
        l> -m "" --> con el mensaje de la version
        l> el hash del commit que queremos marcar

    l> $ git show-ref --tags 
        l> para saber a que hash/commit esta conectado un tag. --> listar los tags de nuestro repositorio local
        
    l> $ git tag -d nombre_del_tag
        l> borrar un tag de nuestro repositorio local
        
    l> $ git push origen --tags
        l> publicar un tag en nuestro repositorio remoto
        
    l> $ git tag -d tag_name
        y
    l> $ git push origen :refs/tags/tag_name
        
    



        --------------------------------
            MANEJO DE RAMAS EN GITHUB
        --------------------------------
        
 { RECORDATORIO: EN GIT l>  $ git branch --> para ver las ramas que contiene nuestro repositorio.
                        l>  $ git branch new_branch_name --> nombrar y crear una nueva rama.
                        l>  $ git checkout -b new_branch_name --> nombrar, crear y conmutar a una nueva rama.
                        l>  $ git brnach -m new_name --> cambiar el nombre de la rama recien creada.
                        l>  $ git checkout branch_name --> para cambiar a una de las ramas que tenemos en nuestro repositorio local.
                        l>  $ git show-branch --> Nos muestra cuales son las ramas que existen y cual ha sido su historia.
                        l>  $ git show-branch --all --> amplia la información de show-branch (ramas locales y remotas y el ultimo commit en cada rama).
                        l>  $ gitk --> abre un software (gitk) la visual de las ramas y su historia. Entorno grafico del flujo de trabajo con Git.
                        l>  $ git push origen branch_name --> enviar una rama del repositorio local al repositorio remoto (GitHub).
                            }
                        
                        l>  $ git clone https://... --> clonar un repositorio remoto en mi pc
                           
                           
                           
 
 
 
 
