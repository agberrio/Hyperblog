------------------------------------------------------------
*** MERGE CON RAMAS DE DESARROLLO DE OTROS COLABORADORES ***
------------------------------------------------------------


Por defecto, cualquier persona puede clonar nuestros repositorios de GitHub, excepto realizar commits, ni ramas etc de nuevo al repositorio remoto.

Una de las varias formas de aceptar contribuciones es permitir el acceso a colaboradores a nuestro proyecto (añadir a cada persona de nuestro eequipo de desarrollo = colaboradores)

Solo debemos entrar a la configuración de colaboradores de nuestro proyecto:

*** (Repositorio > Settings > Collaborators) **** 

añadir el email o username de los nuevos colaboradores.

A nuestros colaboradores les llegara un correo con la invitación la cual deberan aceptar. una vez la acepten sus aportes serán admitidos en el proyecto remoto de GitHub


Las invitaciones se hacen ya sea al correo de nuestro colaborador si esta configurado como publico o al usuario que tiene ese usuario dentro de GitHub.



LOS APORTES DE CADA COLABORADOR DEBERIAN ESTAR SEPARADOS POR RAMAS... ESA ES LA MANERA MAS EFECTIVA DE EVITAR CONFLICTOS CON LA INFORMACIÓN Y QUE SE PIERDAN DATOS IMPORTANTES PORQUE ALGUIEN MODIFICO UN CAMBIO EN LARAMA QUE TRABAJA OTRA PERSONA.

***BUENAS PRACTICAS***
Los archivos binarios no se deben alojar en los repositorios
1. por el tamaño que tienen
2. porque github no puede actualizar constantemente su contenido cada vez que se modifican, se crea un mapa del bianrio pero este no se modifica constantemente.

Sobre el MASTER o MAIN no se debe trabajar. se debe trabajar en ramas y al master solo se envia la información que esta lista para producción, lanzamiento.
en MASTER/MAIN solo se compilan versiones definitivas de todas las ramas.


Nota: El estandar de tildes de Mac y el estandar de tildes de Windows o Linux es distinto; se conoce como el conflicto de Unicode o UTF-8

Una vez se tienen listos los cambios en cada rama, solo nos queda hacer el merge para dejar en nuestra rama maestra los cambios definitivos del proyecto. para lo cual:

  l> Nos ubicamos en la Rama principal/maestra
    l> $ git checkout main --> o master si es el caso.
    l> $ git pull origin main --> para traer los ultimos cambios de esta rama
  
  l> Hacemos el merge con la pirmera rama que queremos traer a nuestro HEAD MASTER.
    l> $ git merge header
      ::si no hay conflictos, todo deberia salir bien::
      :: Si se presentan conflictos se deben seleccionar los conflictos y resolverlos manualmente, puede que haya codigo sobreponiendose al otro por lo cual git no puede tomar decisiones. ::
      
      l> si por alguna razon queemos cancelar el merge
        l> $ git merge --abort
        
  



-----------------
PULL REQUESTS
-----------------

En un entorno profesinal de desarrollo normalmente la rama Master o Main siempre está bloqueada, ya que de esta salen las versiones definitivas que se van a publicar. 
para llegar a esta rama principal primero las versiones pasan por un CODE REVIEW y luego se unen los códigos con un MERGE REQUEST.

Las pruebas (Code Review) de este codigo se realizan en unos servidores a los cuales se les llama STAGING DEVELOP (servidores de pruebas), donde se evaluan los cambios con el codigo y la aplicación y una vez son aprobados pasan al servidor de producción con el MERGE REQUEST.

Antes de que el codigo pase a CODE REVIEW (Staging Develop) se debe hacer un PULL REQUEST, una vez estos PR son aprobados por los auditores del proyecto, las ramas con el nuevo código harán merge en los Staging Develop para hacer el Code Review. una vez estos son aprobados pasan a Merge Request para entrar a la rama Master


El Pull Request se hace desde GitHub, ya que en Git (nuestro repositorio local) esta función no se utiliza.
El PR se utiliza para consolidar cambios auditando su calidad y confirmando su validez para agregar o actualizar otras ramas (Merge), generalmente la rama master/main.

Sobre estos PR se puede solicitar la revisión de algún auditor que evalue (review) el contenido y la validez de estos, este reviewer puede solicitar cambios antes de confirmar la validez y de hacer el Merge.

Asi como tambien se podrá mantener un dialogo alrededor de este PR para alcanzar la maxima calidad de los cambios antes del merge.


